# Now for titles
name.splits <- strsplit(sapply(name.splits, "[", 2), " ")
titles <- sapply(name.splits, "[", 2)
unique(titles)
# Now for titles
name.splits <- strsplit(sapply(name.splits, "[", 2), " ")
titles <- sapply(name.splits, "[", 2)
unique(titles)
name.splits <- strsplit(as.character(data.combined$Name), ",")
name.splits[1]
last.names <- sapply(name.splits, "[", 1)
last.names[1:10]
# Add last names to dataframe in case we find it useful later
data.combined$Last.Name <- last.names
# Now for titles
name.splits <- strsplit(sapply(name.splits, "[", 2), " ")
titles <- sapply(name.splits, "[", 2)
unique(titles)
# What's up with a title of 'the'?
data.combined[which(titles == "the"),]
View(data.combined)
# What's up with a title of 'the'?
data.combined[which(Title == "the"),]
data.combined[titles]
data.combined[which(titles)]
# What's up with a title of 'the'?
data.combined[which(titles == "the"),]
titles <- sapply(name.splits, "[", 2)
unique(titles)
# Now for titles
name.splits <- strsplit(sapply(name.splits, "[", 2), " ")
titles <- sapply(name.splits, "[", 2)
unique(titles)
# What's up with a title of 'the'?
data.combined[which(titles == "the"),]
# What's up with a title of 'the'?
data.combined[which(titles == "the"),]
name.splits <- strsplit(as.character(data.combined$Name), ",")
name.splits[1]
last.names <- sapply(name.splits, "[", 1)
last.names[1:10]
# Add last names to dataframe in case we find it useful later
data.combined$Last.Name <- last.names
# Now for titles
name.splits <- strsplit(sapply(name.splits, "[", 2), " ")
titles <- sapply(name.splits, "[", 2)
unique(titles)
# What's up with a title of 'the'?
data.combined[which(titles == "the"),]
titles
# Re-map titles to be more exact
titles[titles %in% c("Dona.", "the")] <- "Lady."
unique(titles)
titles[titles %in% c("Ms.", "Mlle.")] <- "Miss."
unique(titles)
titles[titles == "Mme."] <- "Mrs."
titles[titles == "Mme."] <- "Mrs."
unique(titles)
titles[titles %in% c("Jonkheer.", "Don.")] <- "Sir."
titles[titles %in% c("Col.", "Capt.", "Major.")] <- "Officer"
unique(titles)
table(titles)
titles[titles %in% c("Dona.", "the")] <- "Lady."
titles[titles %in% c("Ms.", "Mlle.")] <- "Miss."
titles[titles == "Mme."] <- "Mrs."
titles[titles %in% c("Jonkheer.", "Don.")] <- "Sir."
titles[t
titles[titles %in% c("Dona.", "the")] <- "Lady."
titles[titles %in% c("Ms.", "Mlle.")] <- "Miss."
titles[titles == "Mme."] <- "Mrs."
titles[titles %in% c("Jonkheer.", "Don.")] <- "Sir."
titles[titles %in% c("Col.", "Capt.", "Major.")] <- "Officer"
table(titles)
# Make title a factor
data.combined$New.Title <- as.factor(titles)
# Visualize new version of title
ggplot(data.combined[1:891,], aes(x = New.Title, fill = Survived)) +
geom_bar() +
facet_wrap(~ Pclass) +
ggtitle("Surival Rates for new.title by pclass")
# Collapse titles based on visual analysis
indexes <- which(data.combined$New.Title == "Lady.")
data.combined$New.Title[indexes] <- "Mrs."
unique(data.combined$New.Title)
indexes <- which(data.combined$New.Title == "Dr." |
data.combined$New.Title == "Rev." |
data.combined$New.Title == "Sir." |
data.combined$New.Title == "Officer")
data.combined$New.Title[indexes] <- "Mr."
unique(data.combined$New.Title)
# Visualize
ggplot(data.combined[1:891,], aes(x = New.Title, fill = Survived)) +
geom_bar() +
facet_wrap(~ Pclass) +
ggtitle("Surival Rates for Collapsed new.title by pclass")
# Grab features
features <- c("Pclass", "New.Title", "Family.Size")
rpart.train.2 <- data.combined[1:891, features]
# Run CV and check out results
rpart.2.cv.1 <- rpart.cv(94622, rpart.train.2, rf.label, ctrl.3)
rpart.2.cv.1
# Plot
prp(rpart.2.cv.1$finalModel, type = 0, extra = 1, under = TRUE)
# Dive in on 1st class "Mr."
indexes.first.mr <- which(data.combined$New.Title == "Mr." & data.combined$Pclass == "1")
first.mr.df <- data.combined[indexes.first.mr, ]
summary(first.mr.df)
# One female?
first.mr.df[first.mr.df$Sex == "female",]
# Update new.title feature
indexes <- which(data.combined$New.Title == "Mr." &
data.combined$Sex == "female")
data.combined$New.Title[indexes] <- "Mrs."
# Any other gender slip-ups?
length(which(data.combined$Sex == "female" &
(data.combined$New.Title == "Master." |
data.combined$New.Title == "Mr.")))
# Refresh data frame
indexes.first.mr <- which(data.combined$New.Title == "Mr." & data.combined$Pclass == "1")
first.mr.df <- data.combined[indexes.first.mr, ]
# Let's look at surviving 1st class "Mr."
summary(first.mr.df[first.mr.df$survived == "1",])
# Let's look at surviving 1st class "Mr."
summary(first.mr.df[first.mr.df$Survived == "1",])
View(first.mr.df[first.mr.df$Survived == "1",])
# Let's look at surviving 1st class "Mr."
summary(first.mr.df[first.mr.df$Survived == "1",])
View(first.mr.df[first.mr.df$Survived == "1",])
# Take a look at some of the high fares
indexes <- which(data.combined$Ticket == "PC 17755" |
data.combined$Ticket == "PC 17611" |
data.combined$Ticket == "113760")
View(data.combined[indexes,])
# Visualize survival rates for 1st class "Mr." by fare
ggplot(first.mr.df, aes(x = Fare, fill = Survived)) +
geom_density(alpha = 0.5) +
ggtitle("1st Class 'Mr.' Survival Rates by fare")
?prp
# Engineer features based on all the passengers with the same ticket
ticket.party.size <- rep(0, nrow(data.combined))
avg.fare <- rep(0.0, nrow(data.combined))
tickets <- unique(data.combined$Ticket)
tickets <- unique(data.combined$Ticket)
tickets
for (i in 1:length(tickets)) {
current.ticket <- tickets[i]
party.indexes <- which(data.combined$Ticket == current.ticket)
current.avg.fare <- data.combined[party.indexes[1], "fare"] / length(party.indexes)
for (k in 1:length(party.indexes)) {
ticket.party.size[party.indexes[k]] <- length(party.indexes)
avg.fare[party.indexes[k]] <- current.avg.fare
}
}
for (i in 1:length(tickets)) {
current.ticket <- tickets[i]
party.indexes <- which(data.combined$Ticket == current.ticket)
current.avg.fare <- data.combined[party.indexes[1], "fare"] / length(party.indexes)
for (k in 1:length(party.indexes)) {
ticket.party.size[party.indexes[k]] <- length(party.indexes)
avg.fare[party.indexes[k]] <- current.avg.fare
}
}
# Engineer features based on all the passengers with the same ticket
ticket.party.size <- rep(0, nrow(data.combined))
avg.fare <- rep(0.0, nrow(data.combined))
tickets <- unique(data.combined$Ticket)
for (i in 1:length(tickets)) {
current.ticket <- tickets[i]
party.indexes <- which(data.combined$Ticket == current.ticket)
current.avg.fare <- data.combined[party.indexes[1], "fare"] / length(party.indexes)
for (k in 1:length(party.indexes)) {
ticket.party.size[party.indexes[k]] <- length(party.indexes)
avg.fare[party.indexes[k]] <- current.avg.fare
}
}
for (m in 1:length(tickets)) {
current.ticket <- tickets[m]
party.indexes <- which(data.combined$Ticket == current.ticket)
current.avg.fare <- data.combined[party.indexes[1], "fare"] / length(party.indexes)
for (k in 1:length(party.indexes)) {
ticket.party.size[party.indexes[k]] <- length(party.indexes)
avg.fare[party.indexes[k]] <- current.avg.fare
}
}
# Engineer features based on all the passengers with the same ticket
ticket.party.size <- rep(0, nrow(data.combined))
avg.fare <- rep(0.0, nrow(data.combined))
tickets <- unique(data.combined$Ticket)
for (i in 1:length(tickets)) {
current.ticket <- tickets[i]
party.indexes <- which(data.combined$Ticket == current.ticket)
current.avg.fare <- data.combined[party.indexes[1], "fare"] / length(party.indexes)
for (k in 1:length(party.indexes)) {
ticket.party.size[party.indexes[k]] <- length(party.indexes)
avg.fare[party.indexes[k]] <- current.avg.fare
}
}
# Engineer features based on all the passengers with the same ticket
ticket.party.size <- rep(0, nrow(data.combined))
avg.fare <- rep(0.0, nrow(data.combined))
tickets <- unique(data.combined$Ticket)
for (i in 1:length(tickets)) {
current.ticket <- tickets[i]
party.indexes <- which(data.combined$Ticket == current.ticket)
current.avg.fare <- data.combined[party.indexes[1], "fare"] / length(party.indexes)
for (k in 1:length(party.indexes)) {
ticket.party.size[party.indexes[k]] <- length(party.indexes)
avg.fare[party.indexes[k]] <- current.avg.fare
}
}
which(data.combined$Ticket == tickets[1])
which(data.combined$Ticket == tickets[6])
which(data.combined$Ticket == tickets[122])
which(data.combined$Ticket == tickets[152])
data.combined[which(data.combined$Ticket == tickets[152])]
data.combined[which(data.combined$Ticket == tickets[152]),]
data.combined[which(data.combined$Ticket == tickets[152]),'Name']
data.combined$ticket.party.size <- ticket.party.size
data.combined[which(data.combined$Ticket == tickets[152]),'Name']
data.combined[which(data.combined$Ticket == tickets[12]),'Name']
for (i in 1:length(tickets)) {
current.ticket <- tickets[i]
party.indexes <- which(data.combined$Ticket == current.ticket)
current.avg.fare <- data.combined[party.indexes[1], "fare"] / length(party.indexes)
for (k in 1:length(party.indexes)) {
ticket.party.size[party.indexes[k]] <- length(party.indexes)
avg.fare[party.indexes[k]] <- current.avg.fare
}
}
data.combined[100, "fare"] / length(party.indexes)
for (i in 1:length(tickets)) {
current.ticket <- tickets[i]
party.indexes <- which(data.combined$Ticket == current.ticket)
current.avg.fare <- data.combined[party.indexes[1], "Fare"] / length(party.indexes)
for (k in 1:length(party.indexes)) {
ticket.party.size[party.indexes[k]] <- length(party.indexes)
avg.fare[party.indexes[k]] <- current.avg.fare
}
}
for (i in 1:length(tickets)) {
current.ticket <- tickets[i]
party.indexes <- which(data.combined$Ticket == current.ticket)
current.avg.fare <- data.combined[party.indexes[1], "Fare"] / length(party.indexes)
for (k in 1:length(party.indexes)) {
ticket.party.size[party.indexes[k]] <- length(party.indexes)
avg.fare[party.indexes[k]] <- current.avg.fare
}
}
for (i in 1:length(tickets)) {
current.ticket <- tickets[i]
party.indexes <- which(data.combined$Ticket == current.ticket)
current.avg.fare <- data.combined[party.indexes[1], "Fare"] / length(party.indexes)
for (k in 1:length(party.indexes)) {
ticket.party.size[party.indexes[k]] <- length(party.indexes)
avg.fare[party.indexes[k]] <- current.avg.fare
}
}
data.combined$Ticket.Party.Size <- ticket.party.size
data.combined$Avg.Fare <- avg.fare
View(data.combined)
data.combined$ticket.party.size <- NULL
data.combined$Ticket.Party.Size <- ticket.party.size
data.combined$Avg.Fare <- avg.fare
# Refresh 1st class "Mr." dataframe
first.mr.df <- data.combined[indexes.first.mr, ]
summary(first.mr.df)
# Visualize new features
ggplot(first.mr.df[first.mr.df$Survived != "None",], aes(x = ticket.party.size, fill = Survived)) +
geom_density(alpha = 0.5) +
ggtitle("Survival Rates 1st Class 'Mr.' by ticket.party.size")
# Visualize new features
ggplot(first.mr.df[first.mr.df$Survived != "None",], aes(x = ticket.party.size, fill = survived)) +
geom_density(alpha = 0.5) +
ggtitle("Survival Rates 1st Class 'Mr.' by ticket.party.size")
# Visualize new features
ggplot(first.mr.df[first.mr.df$Survived != "None",], aes(x = Ticket.Party.Size, fill = Survived)) +
geom_density(alpha = 0.5) +
ggtitle("Survival Rates 1st Class 'Mr.' by ticket.party.size")
ggplot(first.mr.df[first.mr.df$Survived != "None",], aes(x = Avg.Fare, fill = Survived)) +
geom_density(alpha = 0.5) +
ggtitle("Survival Rates 1st Class 'Mr.' by avg.fare")
# Visualize new features
ggplot(first.mr.df[first.mr.df$Survived != "None",], aes(x = Ticket.Party.Size, fill = Survived)) +
geom_density(alpha = 0.5) +
ggtitle("Survival Rates 1st Class 'Mr.' by ticket.party.size")
# Hypothesis - ticket.party.size is highly correlated with avg.fare
summary(data.combined$Avg.Fare)
# One missing value, take a look
data.combined[is.na(data.combined$Avg.Fare), ]
# Get records for similar passengers and summarize avg.fares
indexes <- with(data.combined, which(Pclass == "3" & Title == "Mr." & Family.Size == 1 &
Ticket != "3701"))
similar.na.passengers <- data.combined[indexes,]
summary(similar.na.passengers$avg.fare)
summary(similar.na.passengers$Avg.Fare)
# Use median since close to mean and a little higher than mean
data.combined[is.na(Avg.Fare), "Avg.Fare"] <- 7.840
# Use median since close to mean and a little higher than mean
data.combined[is.na(avg.fare), "Avg.Fare"] <- 7.840
# One missing value, take a look
data.combined[is.na(data.combined$Avg.Fare), ]
# Get records for similar passengers and summarize avg.fares
indexes <- with(data.combined, which(Pclass == "3" & Title == "Mr." & Family.Size == 1 &
Ticket != "3701"))
similar.na.passengers <- data.combined[indexes,]
summary(similar.na.passengers$Avg.Fare)
# Use median since close to mean and a little higher than mean
data.combined[is.na(avg.fare), "Avg.Fare"] <- 7.840
View(data.combined)
data.combined[is.na(avg.fare)]
data.combined[is.na(avg.fare),"Name"]
data.combined[is.na(avg.fare)]
data.combined[is.na(avg.fare),]
# Leverage caret's preProcess function to normalize data
preproc.data.combined <- data.combined[, c("Ticket.Party.Size", "Avg.Fare")]
preProc <- preProcess(preproc.data.combined, method = c("center", "scale"))
preproc.data.combined
postproc.data.combined <- predict(preProc, preproc.data.combined)
# Hypothesis refuted for all data
cor(postproc.data.combined$Ticket.Party.Size, postproc.data.combined$Avg.Fare)
# How about for just 1st class all-up?
indexes <- which(data.combined$Pclass == "1")
cor(postproc.data.combined$Ticket.Party.Size[indexes],
postproc.data.combined$Avg.Fare[indexes])
?cor
# OK, let's see if our feature engineering has made any difference
features <- c("Pclass", "New.Title", "Family.Size", "Ticket.Party.Size", "Avg.Fare")
rpart.train.3 <- data.combined[1:891, features]
# Run CV and check out results
rpart.3.cv.1 <- rpart.cv(94622, rpart.train.3, rf.label, ctrl.3)
rpart.3.cv.1
# Plot
prp(rpart.3.cv.1$finalModel, type = 0, extra = 1, under = TRUE)
#
# Rpart scores 0.80383
#
# Subset our test records and features
test.submit.df <- data.combined[892:1309, features]
#
# Rpart scores 0.80383
#
# Subset our test records and features
test.submit.df <- data.combined[892:1309, features]
View(cv.5.folds)
View(test.submit.df)
#
# Rpart scores 0.80383
#
# Subset our test records and features
test.submit.df <- data.combined[892:1309, features]
# Make predictions
rpart.3.preds <- predict(rpart.3.cv.1$finalModel, test.submit.df, type = "class")
table(rpart.3.preds)
rpart.3.preds
table(rpart.3.preds)
# Write out a CSV file for submission to Kaggle
submit.df <- data.frame(PassengerId = rep(892:1309), Survived = rpart.3.preds)
write.csv(submit.df, file = "RPART_SUB_20160619_1.csv", row.names = FALSE)
write.csv(submit.df, file = "RPART_SUB_20171011_1.csv", row.names = FALSE)
View(submit.df)
#
# Random forest scores 0.80861
#
features <- c("Pclass", "New.Title", "Ticket.Party.Size", "Avg.Fare")
rf.train.temp <- data.combined[1:891, features]
set.seed(1234)
rf.temp <- randomForest(x = rf.train.temp, y = rf.label, ntree = 1000)
?randomForest
?randomForests
install.packages("randomForest")
rf.temp <- randomForest(x = rf.train.temp, y = rf.label, ntree = 1000)
set.seed(1234)
rf.temp <- randomForest(x = rf.train.temp, y = rf.label, ntree = 1000)
install.packages("randomForest")
rf.temp <- randomForest(x = rf.train.temp, y = rf.label, ntree = 1000)
install.packages("randomForest")
set.seed(1234)
rf.temp <- randomForest(x = rf.train.temp, y = rf.label, ntree = 1000)
?randomForest
library(randomForest)
rf.temp <- randomForest(x = rf.train.temp, y = rf.label, ntree = 1000)
rf.temp
test.submit.df <- data.combined[892:1309, features]
# Make predictions
rf.preds <- predict(rf.temp, test.submit.df)
table(rf.preds)
# Write out a CSV file for submission to Kaggle
submit.df <- data.frame(PassengerId = rep(892:1309), Survived = rf.preds)
write.csv(submit.df, file = "RF_SUB_20171011_1.csv", row.names = FALSE)
?prp
?rpart
View(rpart.2.cv.1)
rpart.2.cv.1[["finalModel"]]
rpart.2.cv.1[["trainingData"]]
?train
install.packages("infotheo")
mutinformation(rf.label, data.combined$Pclass[1:891])
mutinformation(rf.label, data.combined$Sex[1:891])
mutinformation(rf.label, data.combined$SibSp[1:891])
mutinformation(rf.label, data.combined$Parch[1:891])
?mutinformation
# First, let's explore our collection of features using mutual information to
# gain some additional insight. Our intuition is that the plot of our tree
# should align well to the definition of mutual information.
#install.packages("infotheo")
library(infotheo)
mutinformation(rf.label, data.combined$Pclass[1:891])
mutinformation(rf.label, data.combined$Sex[1:891])
mutinformation(rf.label, data.combined$SibSp[1:891])
mutinformation(rf.label, data.combined$Parch[1:891])
mutinformation(rf.label, discretize(data.combined$Fare[1:891]))
mutinformation(rf.label, data.combined$Embarked[1:891])
mutinformation(rf.label, data.combined$Title[1:891])
mutinformation(rf.label, data.combined$Family.Size[1:891])
mutinformation(rf.label, data.combined$Ticket.First.Char[1:891])
mutinformation(rf.label, data.combined$Cabin.Multiple[1:891])
mutinformation(rf.label, data.combined$New.Title[1:891])
mutinformation(rf.label, data.combined$Ticket.Party.Size[1:891])
mutinformation(rf.label, discretize(data.combined$Avg.Fare[1:891]))
discretize(data.combined$Fare[1:891])
discretize(data.combined$Fare[5]), data.combined$Fare[5]
discretize(data.combined$Fare[5])
, data.combined$Fare[5]
data.combined$Fare[5]
discretize(data.combined$Fare[10])
, data.combined$Fare[5]
data.combined$Fare[10]
mutinformation(rf.label, discretize(data.combined$Avg.Fare[1:891]))
mutinformation(rf.label, data.combined$Cabin.Multiple[1:891])
mutinformation(rf.label, data.combined$New.Title[1:891])
mutinformation(rf.label, data.combined$Ticket.Party.Size[1:891])
mutinformation(rf.label, discretize(data.combined$Avg.Fare[1:891]))
# OK, now let's leverage the tsne algorithm to create a 2-D representation of our data
# suitable for visualization starting with folks our model gets right very often - folks
# with titles other than 'Mr."
#install.packages("Rtsne")
library(Rtsne)
install.packages("Rtsne")
# OK, now let's leverage the tsne algorithm to create a 2-D representation of our data
# suitable for visualization starting with folks our model gets right very often - folks
# with titles other than 'Mr."
#install.packages("Rtsne")
library(Rtsne)
most.correct <- data.combined[data.combined$New.Title != "Mr.",]
indexes <- which(most.correct$Survived != "None")
most.correct <- data.combined[data.combined$New.Title != "Mr.",]
indexes <- which(most.correct$Survived != "None")
# NOTE - Bug fix for original version. Rtsne needs a seed to ensure consistent
# output between runs.
set.seed(984357)
tsne.1 <- Rtsne(most.correct[, features], check_duplicates = FALSE)
ggplot(NULL, aes(x = tsne.1$Y[indexes, 1], y = tsne.1$Y[indexes, 2],
color = most.correct$Survived[indexes])) +
geom_point() +
labs(color = "Survived") +
ggtitle("tsne 2D Visualization of Features for new.title Other than 'Mr.'")
dim(tsne$Y)
dim(tsne.$Y)
dim(tsne.1$Y)
# To get a baseline, let's use conditional mutual information on the tsne X and
# Y features for females and boys in 1st and 2nd class. The intuition here is that
# the combination of these features should be higher than any individual feature
# we looked at above.
condinformation(most.correct$Survived[indexes], discretize(tsne.1$Y[indexes,]))
# As one more comparison, we can leverage conditional mutual information using
# the top two features used in our tree plot - new.title and pclass
condinformation(rf.label, data.combined[1:891, c("New.Title", "Pclass")])
tsne.1 <- Rtsne(most.correct[, features], check_duplicates = FALSE)
# OK, now let's take a look at adult males since our model has the biggest
# potential upside for improving (i.e., the tree predicts incorrectly for 86
# adult males). Let's visualize with tsne.
misters <- data.combined[data.combined$New.Title == "Mr.",]
indexes <- which(misters$Survived != "None")
tsne.2 <- Rtsne(misters[, features], check_duplicates = FALSE)
ggplot(NULL, aes(x = tsne.2$Y[indexes, 1], y = tsne.2$Y[indexes, 2],
color = misters$survived[indexes])) +
geom_point() +
labs(color = "Survived") +
ggtitle("tsne 2D Visualization of Features for new.title of 'Mr.'")
ggplot(NULL, aes(x = tsne.2$Y[indexes, 1], y = tsne.2$Y[indexes, 2],
color = misters$Survived[indexes])) +
geom_point() +
labs(color = "Survived") +
ggtitle("tsne 2D Visualization of Features for new.title of 'Mr.'")
# Now conditional mutual information for tsne features for adult males
condinformation(misters$Survived[indexes], discretize(tsne.2$Y[indexes,]))
#
# Idea - How about creating tsne featues for all of the training data and
# using them in our model?
#
tsne.3 <- Rtsne(data.combined[, features], check_duplicates = FALSE)
ggplot(NULL, aes(x = tsne.3$Y[1:891, 1], y = tsne.3$Y[1:891, 2],
color = data.combined$Survived[1:891])) +
geom_point() +
labs(color = "Survived") +
ggtitle("tsne 2D Visualization of Features for all Training Data")
ggplot(NULL, aes(x = tsne.3$Y[1:891, 1], y = tsne.3$Y[1:891, 2],
color = data.combined$Survived[1:891])) +
geom_point() +
labs(color = "Survived") +
ggtitle("tsne 2D Visualization of Features for all Training Data")
2+3
# Now conditional mutual information for tsne features for all training
condinformation(data.combined$Survived[1:891], discretize(tsne.3$Y[1:891,]))
# Add the tsne features to our data frame for use in model building
data.combined$tsne.x <- tsne.3$Y[,1]
data.combined$tsne.y <- tsne.3$Y[,2]
# Now conditional mutual information for tsne features for all training
condinformation(data.combined$Survived[1:891], discretize(tsne.3$Y[1:891,]))
# Add the tsne features to our data frame for use in model building
data.combined$tsne.x <- tsne.3$Y[,1]
data.combined$tsne.y <- tsne.3$Y[,2]
